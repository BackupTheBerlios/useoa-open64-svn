Message 2/5  From Alan Carle                            Dec 5 '91 at
4:19 pm cst


Return-Path: <carle@cs.rice.edu>
Date: Thu, 5 Dec 91 16:19:44 CST
To: hovland@antares.mcs.anl.gov
Subject: Call the exterminator
Reply-To: Alan Carle <carle@rice.edu>


I don't have the list in front of me but it included:

        1. don't handle exprs as arguments
        2. user xxxbar variables mistaken for our bar variables
        3. sometimes generated assignments to gradient objs with rhsides
of 0
                (you never sent me this example, I claimed it probably
                 was related to #2)

alan


Message 20/104  From Alan Carle                        Oct 28 '91 at
8:31 am cst


Return-Path: <carle@cs.rice.edu>
Date: Mon, 28 Oct 91 08:31:20 CST
To: hovland@antares.mcs.anl.gov
Subject: bug fixes...


I have fixed the bug involving the missing declaration in biegler's
code.
You should rerun it and see whether it works.

The bug in the boeing code having to do with mis-typing of variables is
out of my control. I have reported it to the appropriate person for
fixing.
The bug is characterized as follows:

        implicit types should be applied to functions and formal
parameters
        but they are not.

If you want to get around this bug right now, introduce declarations for
each
of the formal parameters. It may be a while till this one is fixed.

Please tell chris about this bug.

alan

Message 34/104  From Alan Carle                        Oct 21 '91 at
5:29 pm cdt


Return-Path: <carle@cs.rice.edu>
Date: Mon, 21 Oct 91 17:29:28 CDT
To: hovland@antares.mcs.anl.gov
Subject: Re:  Most recent draft of ADIFOR paper

Thanks. I'm installing a new version of adtrans right now. Hopefully
fixes the 1/navg bug and the duplicate declaration problem.

alan

Message 38/104  From Alan Carle                        Oct 21 '91 at
8:40 am cdt


Return-Path: <carle@cs.rice.edu>
Date: Mon, 21 Oct 91 08:40:58 CDT
To: bischof@antares.mcs.anl.gov, hovland@antares.mcs.anl.gov
Subject: new adtrans is installed


Bar variables that are used should now be declared.

I am not suppressing the declaration of g$i$ if its not used.

Paul, if you have an example of code in which  adifor declares a
variable multiple times, I would like to see that code.

alan

- I think I may have discovered the source of the error wrt the
- microwave model.  It seems that for ABS(x), ADIFOR is using
- sign(x,1.0d0)*g$x.  However, my Fortran 90 book indicates that
- sign(A,B) is the absolute value of A times the sign of B (if B is 0,
- its sign is taken as positive).  Assuming they didn't switch orders
- from F77 to F90 (and that I'm not too tired to think straight), it
- would seem that we want sign(1.0d0,x) * g$x.  Of course, I would
- prefer that this evaluate to 0 at 0, but I don't see any easy way
- around this without using an IF statement (of course, we could always
- run it through the BASIC preprocessor and use signum).  An eample
- piece of code follows.

I'll change the order of the arguments to sign if that's what's
desired. Hopefully this will be last bug that results from
misunderstandings of the meaning of "sign" and "abs" intrinsics.

from paul:

- Alan: I also noticed that ADIFOR sometimes generates something of the
- form sign(blah,1.0d0) and sometimes dsign(blah,1.0d0).  How come? (In
- both cases, blah was double precision, but in the first case it was an
- array, in the second it was scalar, if that matters).  Inquiring minds
- want to know....

Message 50/104  From Alan Carle                        Oct 16 '91 at
9:52 am cdt


Return-Path: <carle@cs.rice.edu>
Date: Wed, 16 Oct 91 09:52:25 CDT
To: hovland@antares.mcs.anl.gov
Subject: Re:  The new version of ADIFOR

oops. your right of course. Sorry about that one. I've been playing with
the way that declarations are entered into the code and screwed that one
up. I can't fix it until this evening, but I'll send you a command you
can run on all of the generated fortran files to remove the test and let
you and chris keep working. tell chris about the problem please.

alan

Message 51/104  From Alan Carle                        Oct 16 '91 at
9:10 am cdt


Return-Path: <carle@rice.edu>
Date: Wed, 16 Oct 91 09:10:10 CDT
To: hovland@antares.mcs.anl.gov
Subject: Re: try the latest and greatest adifor

Sure. If common blocks are not declared in all subroutines, then adifor
tries to use one of the subroutines that does define a common block as
the "defining routine" for that subroutine. Roger's code does not define
all common blocks in all routines, and I mis-computed which subroutine
was the "defining routine". Adifor then tripped when it tried to look up
the variable 'thetar' in common block /e/ in the wrong place.

Message 52/104  From Alan Carle                        Oct 16 '91 at
9:03 am cdt


Return-Path: <carle@rice.edu>
Date: Wed, 16 Oct 91 09:03:35 CDT
To: hovland@dawn.rice.edu (Paul Hovland)
Subject: try the latest and greatest adifor
Reply-To: Alan Carle <carle@rice.edu>


I fixed a bug, having to do with common block handling when common
blocks are not defined in all routines. Give it a shot and tell
me how it does.

alan

I just tried to rerun Biegler with the new version of the code. Among
other things we now generate

      subroutine g$mymax$6(g$p$, x, y, g$y, ldg$y, z, g$z, ldg$z)
C
C       Formal z is active.
C       Formal y is active.
C
        real g$y(ldg$y)
C
        integer g$p$
        integer g$pmax$
        parameter (g$pmax$ = 12)
        integer g$i$
C
        integer g$p$
        integer g$pmax$
        parameter (g$pmax$ = 12)
        integer g$i$
C
        integer ldg$y
        integer ldg$z
        if (x .lt. y) then
          z = y
          do 99997 g$i$ = 1, g$p$
            g$z(g$i$) = g$y(g$i$)
99997     continue
        else
          z = x
          do 99996 g$i$ = 1, g$p$
            g$z(g$i$) = 0.0
99996     continue
        endif
        return
      end

and g$z is never declared. The code is in
~AD/ADIFOR/EXAMPLES/BIEGLER/NEW.
The old code (where we had the mins and maxes through common blocks)
ran okay and produced the same numbers as the ones you had sent me
before.

        -- Chris

Message 56/104  From Alan Carle                        Oct 15 '91 at
9:06 am cdt


Return-Path: <carle@rice.edu>
Date: Tue, 15 Oct 91 09:06:33 CDT
To: bischof@antares.mcs.anl.gov, hovland@antares.mcs.anl.gov,
        corliss@antares.mcs.anl.gov, griewank@antares.mcs.anl.gov
Subject: status report
Reply-To: Alan Carle <carle@rice.edu>


Recent fixes and modifications include:

        1) modified translations for intrinsics including tan and atan
        2) added a line to the scripts for adifor to define the
           separator character...the default is $, the line looks
           like:
                SEP  X

           The separator must be a single character.
        3) Added parens around unary minuses on the right-handside of
           binary operators, i.e. X * -4 is now X * (-4).
        4) Argument less functions should be okay now.
        5) Common blocks should now be augmented properly.
        6) Comments are now included in the generated fortran code
           describing which common blocks contain active variables,
           and which variables are active.
        7) Turned on the enddo -> continue translation for all
           generated code. I'll add a flag eventually to allow the
           user to choose whether enddo's or continues are desired.

Known bugs:
        1) During the translation I create labelled continues and
           blindly use labels 99999, 99998, ... as necessary. If the
           user's code includes any of those labels already, then the
           code we generate is wrong. This will be fixed shortly.

A comment:
        The current naming convention for generated subroutines is
        as follows:

        1) list all of the formal parameters in the order they
           occur in the subroutine definition, and and then all of
           the common block names in alphabetical order
        2) assign a 1 to each formal or common block in the list that
           is active to form a list of bits
        3) reverse the list of bits and convert to an integer


alan carle

Alan,

The code for g$mymin$217 is correct. xminx is not active.
The calling sequence is still incorrect, though. It seems
as if we still get hung up on subroutine calls w/o arguments.

Did you fix the augmentation of subroutine calls that we could
try out

        call mymin(dh,dt,tmp$m)

instead of the more cumbersome

        xminx = dh
        xminy = dt
       call mymin
       tmp$m = xminz

that we are using now?

        -- Chris

I have turned on the option to use continues instead of enddo's.
Apparantly for some codes this translation will introduce multiple
loops having the same label on the continue at the end of the loop.
I'll see what I can do to fix this.

alan carle

Message 62/104  From Alan Carle                        Oct 14 '91 at
8:54 am cdt


Return-Path: <carle@rice.edu>
Date: Mon, 14 Oct 91 08:54:11 CDT
To: hovland@antares.mcs.anl.gov
Subject: Re:  Common block problems

I have a new and improved adifor and adtrans for you to try which
addresses all of the bugs I have been told about, plus allows the
redefinition of $ to any other single character.

No, I'm not coming in the weekend of the 9th. I'll be around for the
weekend of the 2-3 of November.

I need to download adifor from tape. Once I do, I'll install it on
canopus. Are you prepared to run it on all of the examples we have?

alan

Message 67/104  From bischof                          Oct 9 '91 at 10:55
am -300


Return-Path: <bischof>
To: acw@rice.edu
Cc: bischof, hovland, corliss
Subject: BUG Report
Date: Wed, 09 Oct 91 10:55:25 -0500


Alan,

ADIFOR currently does not handle subroutines w/o arguments
right, and also common blocks are not augmented in the way
I remember us discussing. Here is a little example:

Original File:
=============

c  File:  PROD1.f                13-AUG-1991

      subroutine prod
      integer i,nx
      double precision x, f, p
      common /paul/ nx, x(50), f, grad(50)

      p = 1.0d0
      do 10 i = 1, nx
         p = p * x(i)
 10   continue
      f = p
      return
      end

Adifor'ed File
==============

      subroutine g$prod$1
C
C       ADIFOR: runtime gradient index
        integer g$p$
C       ADIFOR: translation time gradient index
        integer g$pmax$
        parameter (g$pmax$ = 50)
C       ADIFOR: gradient iteration index
        integer g$i$
C
        integer i, nx
        double precision x, f, p
        common /paul/ nx, x(50), f, grad(50)

C
C       ADIFOR: gradient declarations
        double precision g$x(g$pmax$, 50), g$f(g$pmax$), g$p(g$pmax$)
        common /g$paul/ g$nx, g$x, g$f, g$grad
        if (g$p$ .gt. g$pmax$) then
          print *, 'Parameter g$p is greater than g$pmax.'
          stop
        endif
        p = 1.0d0
        do g$i$ = 1, g$p$
          g$p(g$i$) = 0.0d0
        enddo
        do 99999, i = 1, nx
C           p = p * x(i)
          do g$i$ = 1, g$p$
            g$p(g$i$) = x(i) * g$p(g$i$) + p * g$x(g$i$, i)
          enddo
          p = p * x(i)
10        continue
99999   continue
        f = p
        do g$i$ = 1, g$p$
          g$f(g$i$) = g$p(g$i$)
        enddo
        return
      end


Bugs:

1) g$prod1$ has no g$p$ argument

2) g$grad has not been declared.
   In general, it seems that any variable in a common block
   that is not active (but nonetheless we allocate a gradient
   object to allow `reshaping') is not declared.

My impression was that we allocated gradient objects for
every variable in a common block as long as at least one
variable was active. This way aliasing in the original
common block would work w/ the derivative objects as long
as there were no mixed types.

        -- Chris

From: carle@rice.edu (Alan Carle)
Message-Id: <9110031957.AA17995@dawn.rice.edu>
To: bischof@antares.mcs.anl.gov
Subject: new adtrans is installed


Should fix the log10 bug and now no longer forward substitutes
expressions
that are used more than once. The previous version of adtrans
substituted
expressions used at most twice. We had chosen to allow two uses of an
expression in order to visibly "cleanup" the code by getting rid of more
of the temporaries. It is obvious that doing so would slow down the
code.

I also changed the cos and sin rules.

Give the new version a try,
alan

*********
* BUGS: *
*********

There is a bug in the current code for log10. Currently adifor
seems to generate
        abar += 1/(a*10.0)
but it should be
        abar += 1/(a*log(10.0))

Message 86/104  From Alan Carle                        Aug 14 '91 at
2:13 pm cdt


Return-Path: <carle@rice.edu>
Date: Wed, 14 Aug 91 14:13:04 CDT
To: hovland@antares.mcs.anl.gov
Subject: Re:  adifor

Adifor is probably only case-sensitive for the top-level function name.
I'll cha
nge it.
Any code that is generated by adifor will be lowercase, except within
comments.
I'll
be sending you a smarter version of fsplit2 soon.

alan

