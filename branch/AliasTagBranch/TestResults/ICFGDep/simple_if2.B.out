file nameTestCases/ICFGDep/simple_if2.B
 Dep Analysis 

MustDefMap: StmtHandle	 => LocSet

mDepDFSet: StmtHandle	 => DepDFSet
         LOC 0 0 source files:	1	"/nfs/mcs-homes15/malusare/Tag/UseOA-Open64/TestCases/ICFGDep/simple_if2.f"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
stmt: 	 => Inside DepDFSet output

            mUseToDefsMap: UseLoc	 => DefLocSet

            mDefToUsesMap: DefLoc	 => UseLocSet

            ImplicitRemoves:
            Uses:
            Defs:
        stmt: A:0:.predef_F8 = X:0:.predef_F8*    5.000000000000000	 => Inside DepDFSet output

            mUseToDefsMap: UseLoc	 => DefLocSet
                    
                    Tag(
                        mTagID: 6
                        # Deref(NamedRef(head_::X))
                    )
	 => 
                    Tag(
                        mTagID: 3
                        # NamedRef(head_::A)
                    )


            mDefToUsesMap: DefLoc	 => UseLocSet
                    
                    Tag(
                        mTagID: 3
                        # NamedRef(head_::A)
                    )
	 => 
                    Tag(
                        mTagID: 6
                        # Deref(NamedRef(head_::X))
                    )


            ImplicitRemoves:
            Uses:
            Tag(
                mTagID: 6
                # Deref(NamedRef(head_::X))
            )

            Defs:
            Tag(
                mTagID: 3
                # NamedRef(head_::A)
            )

        stmt: B:0:.predef_F8 = A:0:.predef_F8	 => Inside DepDFSet output

            mUseToDefsMap: UseLoc	 => DefLocSet
                    
                    Tag(
                        mTagID: 3
                        # NamedRef(head_::A)
                    )
	 => 
                    Tag(
                        mTagID: 4
                        # NamedRef(head_::B)
                    )


            mDefToUsesMap: DefLoc	 => UseLocSet
                    
                    Tag(
                        mTagID: 4
                        # NamedRef(head_::B)
                    )
	 => 
                    Tag(
                        mTagID: 3
                        # NamedRef(head_::A)
                    )


            ImplicitRemoves:
            Uses:
            Tag(
                mTagID: 3
                # NamedRef(head_::A)
            )

            Defs:
            Tag(
                mTagID: 4
                # NamedRef(head_::B)
            )

        stmt: if (A:0:.predef_F8>    10.00000000000000)	 => Inside DepDFSet output

            mUseToDefsMap: UseLoc	 => DefLocSet

            mDefToUsesMap: DefLoc	 => UseLocSet

            ImplicitRemoves:
            Uses:
            Defs:
        stmt: C:0:.predef_F8 =     3.000000000000000	 => Inside DepDFSet output

            mUseToDefsMap: UseLoc	 => DefLocSet

            mDefToUsesMap: DefLoc	 => UseLocSet

            ImplicitRemoves:
            Uses:
            Defs:
        stmt: C:0:.predef_F8 = -A:0:.predef_F8	 => Inside DepDFSet output

            mUseToDefsMap: UseLoc	 => DefLocSet
                    
                    Tag(
                        mTagID: 3
                        # NamedRef(head_::A)
                    )
	 => 
                    Tag(
                        mTagID: 5
                        # NamedRef(head_::C)
                    )


            mDefToUsesMap: DefLoc	 => UseLocSet
                    
                    Tag(
                        mTagID: 5
                        # NamedRef(head_::C)
                    )
	 => 
                    Tag(
                        mTagID: 3
                        # NamedRef(head_::A)
                    )


            ImplicitRemoves:
            Uses:
            Tag(
                mTagID: 3
                # NamedRef(head_::A)
            )

            Defs:
            Tag(
                mTagID: 5
                # NamedRef(head_::C)
            )

        stmt: Y:0:.predef_F8 = C:0:.predef_F8+B:0:.predef_F8*    3.000000000000000	 => Inside DepDFSet output

            mUseToDefsMap: UseLoc	 => DefLocSet
                    
                    Tag(
                        mTagID: 4
                        # NamedRef(head_::B)
                    )
	 => 
                    Tag(
                        mTagID: 7
                        # Deref(NamedRef(head_::Y))
                    )

                    
                    Tag(
                        mTagID: 5
                        # NamedRef(head_::C)
                    )
	 => 
                    Tag(
                        mTagID: 7
                        # Deref(NamedRef(head_::Y))
                    )


            mDefToUsesMap: DefLoc	 => UseLocSet
                    
                    Tag(
                        mTagID: 7
                        # Deref(NamedRef(head_::Y))
                    )
	 => 
                    Tag(
                        mTagID: 4
                        # NamedRef(head_::B)
                    )

                    Tag(
                        mTagID: 5
                        # NamedRef(head_::C)
                    )


            ImplicitRemoves:
            Uses:
            Tag(
                mTagID: 4
                # NamedRef(head_::B)
            )

            Tag(
                mTagID: 5
                # NamedRef(head_::C)
            )

            Defs:
            Tag(
                mTagID: 7
                # Deref(NamedRef(head_::Y))
            )

        stmt: return	 => Inside DepDFSet output

            mUseToDefsMap: UseLoc	 => DefLocSet

            mDefToUsesMap: DefLoc	 => UseLocSet

            ImplicitRemoves:
            Uses:
            Defs:
