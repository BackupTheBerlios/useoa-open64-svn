
graph DGraph:

    Node 1: 
        head_ [defined]

    Node 2: 
        foo_ [defined]

    Node 3: 
        SIN [referenced]

    Node 4: 
        COS [referenced]

    Node 5: 
        bar_ [defined]

    Edge: 1 => 2
        foo_(&X:0:anon_ptr.(1), &X:0:anon_ptr.(2), &Y:0:anon_ptr.(1))

    Edge: 1 => 3
        SIN(&0:X:0:anon_ptr.(1)*0:X:0:anon_ptr.(2))

    Edge: 1 => 3
        SIN(&X:0:anon_ptr.(3))

    Edge: 1 => 4
        COS(&X:0:anon_ptr.(4))

    Edge: 2 => 5
        bar_(&B:0:.predef_F8)

    Edge: 5 => 4
        COS(&A:0:.predef_F8*A:0:.predef_F8)


mCallToCalleeProcSetMap: CallHandle	 => OA_ptr<std::set<ProcHandle> > 
        foo_(&X:0:anon_ptr.(1), &X:0:anon_ptr.(2), &Y:0:anon_ptr.(1))	 => [ foo_ ] 
        SIN(&0:X:0:anon_ptr.(1)*0:X:0:anon_ptr.(2))	 => [ ProcHandle(0) ] 
        SIN(&X:0:anon_ptr.(3))	 => [ ProcHandle(0) ] 
        COS(&X:0:anon_ptr.(4))	 => [ ProcHandle(0) ] 
        bar_(&B:0:.predef_F8)	 => [ bar_ ] 
        COS(&A:0:.predef_F8*A:0:.predef_F8)	 => [ ProcHandle(0) ] 

digraph DGraph {
    node [shape=rectangle];
    1 [ label="head_ [defined]" ];
    2 [ label="foo_ [defined]" ];
    3 [ label="SIN [referenced]" ];
    4 [ label="COS [referenced]" ];
    5 [ label="bar_ [defined]" ];
    1 -> 2 [ label="foo_(&X:0:anon_ptr.(1), &X:0:anon_ptr.(2), &Y:0:anon_ptr.(1))" ];
    1 -> 3 [ label="SIN(&0:X:0:anon_ptr.(1)*0:X:0:anon_ptr.(2))" ];
    1 -> 3 [ label="SIN(&X:0:anon_ptr.(3))" ];
    1 -> 4 [ label="COS(&X:0:anon_ptr.(4))" ];
    2 -> 5 [ label="bar_(&B:0:.predef_F8)" ];
    5 -> 4 [ label="COS(&A:0:.predef_F8*A:0:.predef_F8)" ];}

mCallToCalleeProcSetMap: CallHandle	 => OA_ptr<std::set<ProcHandle> > 
        foo_(&X:0:anon_ptr.(1), &X:0:anon_ptr.(2), &Y:0:anon_ptr.(1))	 => [ foo_ ] 
        SIN(&0:X:0:anon_ptr.(1)*0:X:0:anon_ptr.(2))	 => [ ProcHandle(0) ] 
        SIN(&X:0:anon_ptr.(3))	 => [ ProcHandle(0) ] 
        COS(&X:0:anon_ptr.(4))	 => [ ProcHandle(0) ] 
        bar_(&B:0:.predef_F8)	 => [ bar_ ] 
        COS(&A:0:.predef_F8*A:0:.predef_F8)	 => [ ProcHandle(0) ] 
