
PROCEDURE = { < ProcHandle("foo_::foo_"), SymHandle("foo_::foo_") > }
    FORMALS = {
        [
            < 0, SymHandle("foo_::X") >
            < 1, SymHandle("foo_::Y") >
        ] }
    MEMREFEXPRS = { StmtHandle(" LOC 0 0 source files:	1	"/m_home/m_utkej/Argonne/svn/UseOA-Open64/trunk/TestCases/Alias/formal_scalar_actual.f90"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("Y:0:.predef_F8 = X:0:.predef_F8*    2.000000000000000") =>
        [
            MemRefHandle("Y:0:.predef_F8") => 
                Deref( DEF, NamedRef( USE, SymHandle("foo_::Y")), 1)
            MemRefHandle("X:0:.predef_F8") => 
                Deref( USE, NamedRef( USE, SymHandle("foo_::X")), 1)
        ] }
    MEMREFEXPRS = { StmtHandle("return") =>
        [
        ] }
    LOCATION = { < SymHandle("foo_::foo_"), not local > }
    LOCATION = { < SymHandle("foo_::X"), local > }
    LOCATION = { < SymHandle("foo_::Y"), local > }

PROCEDURE = { < ProcHandle("foo_::head_"), SymHandle("foo_::head_") > }
    FORMALS = {
        [
            < 0, SymHandle("head_::X") >
            < 1, SymHandle("head_::Y") >
        ] }
    MEMREFEXPRS = { StmtHandle("PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("foo_(&X:0:.predef_F8, &Y:0:.predef_F8)") =>
        [
            MemRefHandle("&X:0:.predef_F8") => 
                NamedRef( USE, SymHandle("head_::X"))
            MemRefHandle("&Y:0:.predef_F8") => 
                NamedRef( USE, SymHandle("head_::Y"))
        ] }
    CALLSITES = { StmtHandle("foo_(&X:0:.predef_F8, &Y:0:.predef_F8)") =>
        [
            CallHandle("foo_(&X:0:.predef_F8, &Y:0:.predef_F8)") => 
                NamedRef( USE, SymHandle("foo_::foo_"))
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("foo_(&X:0:.predef_F8, &Y:0:.predef_F8)") =>
        [
            < 0, NamedRef( USE, SymHandle("head_::X")) >
            < 1, NamedRef( USE, SymHandle("head_::Y")) >
        ] }
    MEMREFEXPRS = { StmtHandle("return") =>
        [
        ] }
    LOCATION = { < SymHandle("foo_::foo_"), not local > }
    LOCATION = { < SymHandle("foo_::head_"), not local > }
    LOCATION = { < SymHandle("head_::X"), local > }
    LOCATION = { < SymHandle("head_::Y"), local > }
