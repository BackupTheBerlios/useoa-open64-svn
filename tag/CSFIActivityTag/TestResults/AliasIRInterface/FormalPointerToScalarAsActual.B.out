
PROCEDURE = { < ProcHandle("foo_::foo_"), SymHandle("foo_::foo_") > }
    FORMALS = {
        [
            < 0, SymHandle("foo_::P") >
            < 1, SymHandle("foo_::X") >
        ] }
    MEMREFEXPRS = { StmtHandle(" LOC 0 0 source files:	1	"/home/malusare/MemRefExpr/UseOA-Open64/TestCases/Alias/FormalPointerToScalarAsActual.f"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("U8PSTID 0 <2,1,P> T<30,anon_ptr.,8>
") =>
        [
            MemRefHandle("P:0:anon_ptr.") => 
                Deref( DEF, NamedRef( USE, SymHandle("foo_::P")), 1)
            MemRefHandle("X:0:.predef_F8") => 
                NamedRef( USE, SymHandle("foo_::X"))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("U8PSTID 0 <2,1,P> T<30,anon_ptr.,8>
") =>
        [
            < Deref( DEF, NamedRef( USE, SymHandle("foo_::P")), 1)
            , NamedRef( USE, SymHandle("foo_::X")) >
        ] }
    MEMREFEXPRS = { StmtHandle("bar_(&P:0:anon_ptr.)") =>
        [
            MemRefHandle("&P:0:anon_ptr.") => 
                NamedRef( USE, SymHandle("foo_::P"))
        ] }
    CALLSITES = { StmtHandle("bar_(&P:0:anon_ptr.)") =>
        [
            CallHandle("bar_(&P:0:anon_ptr.)") => 
                NamedRef( USE, SymHandle("foo_::bar_"))
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("bar_(&P:0:anon_ptr.)") =>
        [
            < 0, NamedRef( USE, SymHandle("foo_::P")) >
        ] }
    MEMREFEXPRS = { StmtHandle("return") =>
        [
        ] }
    LOCATION = { < SymHandle("foo_::foo_"), not local > }
    LOCATION = { < SymHandle("foo_::bar_"), not local > }
    LOCATION = { < SymHandle("foo_::P"), local > }
    LOCATION = { < SymHandle("foo_::X"), local > }

PROCEDURE = { < ProcHandle("foo_::bar_"), SymHandle("foo_::bar_") > }
    FORMALS = {
        [
            < 0, SymHandle("bar_::Q") >
        ] }
    MEMREFEXPRS = { StmtHandle("PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return") =>
        [
        ] }
    LOCATION = { < SymHandle("foo_::bar_"), not local > }
    LOCATION = { < SymHandle("bar_::Q"), local > }
