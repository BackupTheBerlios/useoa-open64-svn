
PROCEDURE = { < ProcHandle("factorial_::factorial_"), SymHandle("factorial_::factorial_") > }
    FORMALS = {
        [
            < 0, SymHandle("factorial_::N") >
        ] }
    MEMREFEXPRS = { StmtHandle(" LOC 0 0 source files:	1	"/home/malusare/100506/UseOA-Open64/TestCases/MemRefExpr/local_actual_expression_assignment.f90"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("if (N:0:.predef_I4==1)") =>
        [
            MemRefHandle("N:0:.predef_I4") => 
                Deref( USE, NamedRef( USE, SymHandle("factorial_::N"), full), 1, full)
        ] }
    MEMREFEXPRS = { StmtHandle("RES:0:.predef_I4 = 1") =>
        [
            MemRefHandle("RES:0:.predef_I4") => 
                NamedRef( DEF, SymHandle("factorial_::RES"), full)
        ] }
    MEMREFEXPRS = { StmtHandle("N:0:.predef_I4 = N:0:.predef_I4+-1") =>
        [
            MemRefHandle("N:0:.predef_I4") => 
                Deref( DEF, NamedRef( USE, SymHandle("factorial_::N"), full), 1, full)
            MemRefHandle("N:0:.predef_I4") => 
                Deref( USE, NamedRef( USE, SymHandle("factorial_::N"), full), 1, full)
        ] }
    MEMREFEXPRS = { StmtHandle("RES:0:.predef_I4 = N:0:.predef_I4*factorial_(&N:0:.predef_I4)") =>
        [
            MemRefHandle("RES:0:.predef_I4") => 
                NamedRef( DEF, SymHandle("factorial_::RES"), full)
            MemRefHandle("N:0:.predef_I4") => 
                Deref( USE, NamedRef( USE, SymHandle("factorial_::N"), full), 1, full)
            MemRefHandle("&N:0:.predef_I4") => 
                NamedRef( USE, SymHandle("factorial_::N"), full)
        ] }
    CALLSITES = { StmtHandle("RES:0:.predef_I4 = N:0:.predef_I4*factorial_(&N:0:.predef_I4)") =>
        [
            CallHandle("factorial_(&N:0:.predef_I4)") => 
                NamedRef( USE, SymHandle("factorial_::factorial_"), full)
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("factorial_(&N:0:.predef_I4)") =>
        [
            < 0, NamedRef( USE, SymHandle("factorial_::N"), full) >
        ] }
    MEMREFEXPRS = { StmtHandle("return (RES:0:.predef_I4)") =>
        [
            MemRefHandle("RES:0:.predef_I4") => 
                NamedRef( USE, SymHandle("factorial_::RES"), full)
        ] }
    LOCATION = { < SymHandle("factorial_::factorial_"), not local > }
    LOCATION = { < SymHandle("factorial_::RES"), local > }
    LOCATION = { < SymHandle("factorial_::N"), local > }

PROCEDURE = { < ProcHandle("factorial_::recfunc_"), SymHandle("factorial_::recfunc_") > }
    MEMREFEXPRS = { StmtHandle("PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("N:0:.predef_I4 = TRUNC(factorial_(&N:0:.predef_I4+-1))") =>
        [
            MemRefHandle("N:0:.predef_I4") => 
                NamedRef( DEF, SymHandle("recfunc_::N"), full)
            MemRefHandle("&N:0:.predef_I4+-1") => 
                AddressOf( USE, UnnamedRef( DEF, StmtHandle("N:0:.predef_I4 = TRUNC(factorial_(&N:0:.predef_I4+-1))"), full), full)
            MemRefHandle("N:0:.predef_I4+-1") => 
                UnnamedRef( DEF, StmtHandle("N:0:.predef_I4 = TRUNC(factorial_(&N:0:.predef_I4+-1))"), full)
            MemRefHandle("N:0:.predef_I4") => 
                NamedRef( USE, SymHandle("recfunc_::N"), full)
        ] }
    CALLSITES = { StmtHandle("N:0:.predef_I4 = TRUNC(factorial_(&N:0:.predef_I4+-1))") =>
        [
            CallHandle("factorial_(&N:0:.predef_I4+-1)") => 
                NamedRef( USE, SymHandle("factorial_::factorial_"), full)
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("factorial_(&N:0:.predef_I4+-1)") =>
        [
            < 0, AddressOf( USE, UnnamedRef( DEF, StmtHandle("N:0:.predef_I4 = TRUNC(factorial_(&N:0:.predef_I4+-1))"), full), full) >
        ] }
    MEMREFEXPRS = { StmtHandle("_END()") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return") =>
        [
        ] }
    LOCATION = { < SymHandle("factorial_::factorial_"), not local > }
    LOCATION = { < SymHandle("factorial_::recfunc_"), not local > }
    LOCATION = { < SymHandle("recfunc_::N"), local > }
