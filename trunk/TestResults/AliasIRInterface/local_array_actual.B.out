
PROCEDURE = { < ProcHandle("foo_::foo_"), SymHandle("foo_::foo_") > }
    FORMALS = {
        [
            < 0, SymHandle("foo_::X") >
            < 1, SymHandle("foo_::Y") >
        ] }
    MEMREFEXPRS = { StmtHandle(" LOC 0 0 source files:	1	"/m_home/m_utkej/Argonne/svn/UseOA-Open64/trunk/TestCases/Alias/local_array_actual.f90"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("Y:0:anon_ptr.(I:0:.predef_I4) = 0:X:0:anon_ptr.(I:0:.predef_I4)*    2.000000000000000") =>
        [
            MemRefHandle("Y:0:anon_ptr.(I:0:.predef_I4)") => 
                SubSetRef( DEF, Deref( DEF, NamedRef( USE, SymHandle("foo_::Y")), 1))
            MemRefHandle("0:X:0:anon_ptr.(I:0:.predef_I4)") => 
                SubSetRef( USE, Deref( USE, NamedRef( USE, SymHandle("foo_::X")), 1))
            MemRefHandle("I:0:.predef_I4") => 
                NamedRef( USE, SymHandle("foo_::I"))
            MemRefHandle("I:0:.predef_I4") => 
                NamedRef( USE, SymHandle("foo_::I"))
        ] }
    MEMREFEXPRS = { StmtHandle("return") =>
        [
        ] }
    LOCATION = { < SymHandle("foo_::foo_"), not local > }
    LOCATION = { < SymHandle("foo_::X"), local > }
    LOCATION = { < SymHandle("foo_::Y"), local > }
    LOCATION = { < SymHandle("foo_::I"), local > }

PROCEDURE = { < ProcHandle("foo_::head_"), SymHandle("foo_::head_") > }
    MEMREFEXPRS = { StmtHandle("PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("foo_(&0:P:0:anon_ptr., &0:Q:0:anon_ptr.)") =>
        [
            MemRefHandle("&0:P:0:anon_ptr.") => 
                AddressOf( USE, NamedRef( USE, SymHandle("head_::P")))
            MemRefHandle("&0:Q:0:anon_ptr.") => 
                AddressOf( USE, NamedRef( USE, SymHandle("head_::Q")))
        ] }
    CALLSITES = { StmtHandle("foo_(&0:P:0:anon_ptr., &0:Q:0:anon_ptr.)") =>
        [
            CallHandle("foo_(&0:P:0:anon_ptr., &0:Q:0:anon_ptr.)") => 
                NamedRef( USE, SymHandle("foo_::foo_"))
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("foo_(&0:P:0:anon_ptr., &0:Q:0:anon_ptr.)") =>
        [
            < 0, AddressOf( USE, NamedRef( USE, SymHandle("head_::P"))) >
            < 1, AddressOf( USE, NamedRef( USE, SymHandle("head_::Q"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("return") =>
        [
        ] }
    LOCATION = { < SymHandle("foo_::foo_"), not local > }
    LOCATION = { < SymHandle("foo_::head_"), not local > }
    LOCATION = { < SymHandle("head_::P"), local > }
    LOCATION = { < SymHandle("head_::Q"), local > }
