
InterAliasMap(
    AliasMap(
        mProcHandle: ProcHandle(cost_mod_::cost_mod_)
        mNumSets: 1
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet

        mIdToMRESetMap: int	 => MemRefExprSet

    )
    AliasMap(
        mProcHandle: ProcHandle(cost_mod_::ctrl_mod_)
        mNumSets: 1
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet

        mIdToMRESetMap: int	 => MemRefExprSet

    )
    AliasMap(
        mProcHandle: ProcHandle(cost_mod_::the_main_loop_)
        mNumSets: 6
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::FC)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::XX_THETA)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::initialise_const_)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::initialise_varia_)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                5	 => [ 
                    LocSubSet(
                        mLoc: 
                        NamedLoc(
                            mSymHandle: SymHandle(cost_mod_::XX_THETA)
                            mLocal: 0
                            mFullOverlap: [  ] 
                            mPartOverlap: [  ] 
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 2
                5	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(cost_mod_::FC)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(cost_mod_::XX_THETA)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(cost_mod_::initialise_const_)
                    ) ] 
                4	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(cost_mod_::initialise_varia_)
                    ) ] 
                5	 => [ 
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(cost_mod_::XX_THETA)
                        )
                    ) ] 

    )
    AliasMap(
        mProcHandle: ProcHandle(cost_mod_::initialise_varia_)
        mNumSets: 6
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::OBJF_TEST)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::XX_THETA)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::initialise_varia_)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    LocSubSet(
                        mLoc: 
                        NamedLoc(
                            mSymHandle: SymHandle(cost_mod_::OBJF_TEST)
                            mLocal: 0
                            mFullOverlap: [  ] 
                            mPartOverlap: [  ] 
                        )
                        mFull: 0
                    ) ] 
                5	 => [ 
                    LocSubSet(
                        mLoc: 
                        NamedLoc(
                            mSymHandle: SymHandle(cost_mod_::XX_THETA)
                            mLocal: 0
                            mFullOverlap: [  ] 
                            mPartOverlap: [  ] 
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 1
                5	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                4	 => [ MemRefHandle(OBJF_TEST:0:anon_ptr.(2,1)) ] 
                5	 => [ MemRefHandle(0:XX_THETA:0:anon_ptr.(5,4,3,2,1)) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(cost_mod_::OBJF_TEST)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(cost_mod_::XX_THETA)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(cost_mod_::initialise_varia_)
                    ) ] 
                4	 => [ 
                    SubSetRef(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(cost_mod_::OBJF_TEST)
                        )
                    ) ] 
                5	 => [ 
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(cost_mod_::XX_THETA)
                        )
                    ) ] 

    )
    AliasMap(
        mProcHandle: ProcHandle(cost_mod_::initialise_const_)
        mNumSets: 5
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::FC)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::OBJF_TEST)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(cost_mod_::initialise_const_)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    LocSubSet(
                        mLoc: 
                        NamedLoc(
                            mSymHandle: SymHandle(cost_mod_::OBJF_TEST)
                            mLocal: 0
                            mFullOverlap: [  ] 
                            mPartOverlap: [  ] 
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                1	 => [ MemRefHandle(FC:0:.predef_F8) ] 
                4	 => [ MemRefHandle(0:OBJF_TEST:0:anon_ptr.(2,1)) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(cost_mod_::FC)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(cost_mod_::OBJF_TEST)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(cost_mod_::initialise_const_)
                    ) ] 
                4	 => [ 
                    SubSetRef(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(cost_mod_::OBJF_TEST)
                        )
                    ) ] 

    )
)
