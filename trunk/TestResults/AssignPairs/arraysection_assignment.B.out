========================================================

stmt :  LOC 0 0 source files:	1	"/home/malusare/AssignPair/UseOA-Open64/TestCases/AssignPair/arraysection_assignment.f"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : B:0:anon_ptr.(1:1:3) = 0:A:0:anon_ptr.(0:VECTOR:0:anon_ptr.(1:1:3))

==> AssignPairs : 

1. mref = B:0:anon_ptr.(1:1:3), 	expr = 0:A:0:anon_ptr.(0:VECTOR:0:anon_ptr.(1:1:3))



==> Expression Tree(s) : 

1. ExprHandle: 0:A:0:anon_ptr.(0:VECTOR:0:anon_ptr.(1:1:3))

graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( 0:A:0:anon_ptr.(0:VECTOR:0:anon_ptr.(1:1:3)) )


2. ExprHandle: 0:VECTOR:0:anon_ptr.(1:1:3)

graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( 0:VECTOR:0:anon_ptr.(1:1:3) )


3. ExprHandle: 1:1:3

graph EXPRESSION TREE:

    Node 0: ET ConstValNode ( 1:1:3 )


4. ExprHandle: 1:1:3

graph EXPRESSION TREE:

    Node 0: ET ConstValNode ( 1:1:3 )


==> MemRefHandle:B:0:anon_ptr.(1:1:3)
	mre: 

SubSetRef(
    mMemRefType: DEF
    mMRE: 
    Deref(
        mMemRefType: USE
        mMRE: 
        NamedRef(
            mMemRefType: USE
            mSymHandle: SymHandle(head_::B)
        )
        mNumDeref: 1
    )
)

==> MemRefHandle:0:A:0:anon_ptr.(0:VECTOR:0:anon_ptr.(1:1:3))
	mre: 

SubSetRef(
    mMemRefType: USE
    mMRE: 
    Deref(
        mMemRefType: USE
        mMRE: 
        NamedRef(
            mMemRefType: USE
            mSymHandle: SymHandle(head_::A)
        )
        mNumDeref: 1
    )
)

==> MemRefHandle:0:VECTOR:0:anon_ptr.(1:1:3)
	mre: 

SubSetRef(
    mMemRefType: USE
    mMRE: 
    NamedRef(
        mMemRefType: USE
        mSymHandle: SymHandle(head_::VECTOR)
    )
)

========================================================

stmt : A:0:anon_ptr.(1:1:3) = 0:B:0:anon_ptr.(0:t__1:0:anon_ptr.(1:1:3))

==> AssignPairs : 

1. mref = A:0:anon_ptr.(1:1:3), 	expr = 0:B:0:anon_ptr.(0:t__1:0:anon_ptr.(1:1:3))



==> Expression Tree(s) : 

1. ExprHandle: 0:B:0:anon_ptr.(0:t__1:0:anon_ptr.(1:1:3))

graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( 0:B:0:anon_ptr.(0:t__1:0:anon_ptr.(1:1:3)) )


2. ExprHandle: 0:t__1:0:anon_ptr.(1:1:3)

graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( 0:t__1:0:anon_ptr.(1:1:3) )


3. ExprHandle: 1:1:3

graph EXPRESSION TREE:

    Node 0: ET ConstValNode ( 1:1:3 )


4. ExprHandle: 1:1:3

graph EXPRESSION TREE:

    Node 0: ET ConstValNode ( 1:1:3 )


==> MemRefHandle:A:0:anon_ptr.(1:1:3)
	mre: 

SubSetRef(
    mMemRefType: DEF
    mMRE: 
    Deref(
        mMemRefType: USE
        mMRE: 
        NamedRef(
            mMemRefType: USE
            mSymHandle: SymHandle(head_::A)
        )
        mNumDeref: 1
    )
)

==> MemRefHandle:0:B:0:anon_ptr.(0:t__1:0:anon_ptr.(1:1:3))
	mre: 

SubSetRef(
    mMemRefType: USE
    mMRE: 
    Deref(
        mMemRefType: USE
        mMRE: 
        NamedRef(
            mMemRefType: USE
            mSymHandle: SymHandle(head_::B)
        )
        mNumDeref: 1
    )
)

==> MemRefHandle:0:t__1:0:anon_ptr.(1:1:3)
	mre: 

SubSetRef(
    mMemRefType: USE
    mMRE: 
    NamedRef(
        mMemRefType: USE
        mSymHandle: SymHandle(head_::t__1)
    )
)

========================================================

stmt : return

==> AssignPairs : 




==> Expression Tree(s) : 

