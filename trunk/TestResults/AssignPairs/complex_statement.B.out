========================================================

stmt :  LOC 0 0 source files:	1	"/home/malusare/AssignPair/UseOA-Open64/TestCases/AssignPair/complex_statement.f"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : X:0:.predef_I4 = TRUNC(OPC_F4I4CVT(Y:0:.predef_I4)+Z:0:.predef_F4)

==> AssignPairs : 

1. mref = X:0:.predef_I4, 	expr = TRUNC(OPC_F4I4CVT(Y:0:.predef_I4)+Z:0:.predef_F4)



==> Expression Tree(s) : 

1. ExprHandle: TRUNC(OPC_F4I4CVT(Y:0:.predef_I4)+Z:0:.predef_F4)

Graph EXPRESSION TREE:

    Node 0: ET OpNode ( TRUNC() )
    Edge: 
        0 => 
        Node 1: ET OpNode ( + )
        Edge: 
            1 => 
            Node 2: ET MemRefNode ( Y:0:.predef_I4 )
        Edge: 
            1 => 
            Node 3: ET MemRefNode ( Z:0:.predef_F4 )


==> MemRefHandle:X:0:.predef_I4
	mre: 

Deref(
    mMemRefType: DEF
    mMRE: 
    NamedRef(
        mMemRefType: USE
        mSymHandle: SymHandle(bar_::X)
    )
    mNumDeref: 1
)

==> MemRefHandle:Y:0:.predef_I4
	mre: 

Deref(
    mMemRefType: USE
    mMRE: 
    NamedRef(
        mMemRefType: USE
        mSymHandle: SymHandle(bar_::Y)
    )
    mNumDeref: 1
)

==> MemRefHandle:Z:0:.predef_F4
	mre: 

Deref(
    mMemRefType: USE
    mMRE: 
    NamedRef(
        mMemRefType: USE
        mSymHandle: SymHandle(bar_::Z)
    )
    mNumDeref: 1
)

========================================================

stmt : return

==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : bar_(&C:0:.predef_I4, &A:0:.predef_I4+B:0:.predef_I4, &D:0:.predef_I4)

==> AssignPairs : 

1. mref = A:0:.predef_I4+B:0:.predef_I4, 	expr = A:0:.predef_I4+B:0:.predef_I4



==> Expression Tree(s) : 

1. ExprHandle: &C:0:.predef_I4

Graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &C:0:.predef_I4 )


2. ExprHandle: &A:0:.predef_I4+B:0:.predef_I4

Graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &A:0:.predef_I4+B:0:.predef_I4 )


3. ExprHandle: A:0:.predef_I4+B:0:.predef_I4

Graph EXPRESSION TREE:

    Node 0: ET OpNode ( + )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( A:0:.predef_I4 )
    Edge: 
        0 => 
        Node 2: ET MemRefNode ( B:0:.predef_I4 )


4. ExprHandle: &D:0:.predef_I4

Graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &D:0:.predef_I4 )


==> MemRefHandle:&C:0:.predef_I4
	mre: 

AddressOf(
    mMemRefType: USE
    mMRE: 
    NamedRef(
        mMemRefType: USE
        mSymHandle: SymHandle(foo_::C)
    )
)

==> MemRefHandle:&A:0:.predef_I4+B:0:.predef_I4
	mre: 

AddressOf(
    mMemRefType: USE
    mMRE: 
    UnnamedRef(
        mMemRefType: USE
        mExprHandle: ExprHandle(A:0:.predef_I4+B:0:.predef_I4)
        mLocal: 1
        mProcHandle: ProcHandle(bar_::foo_)
    )
)

==> MemRefHandle:A:0:.predef_I4+B:0:.predef_I4
	mre: 

UnnamedRef(
    mMemRefType: DEF
    mExprHandle: ExprHandle(A:0:.predef_I4+B:0:.predef_I4)
    mLocal: 1
    mProcHandle: ProcHandle(bar_::foo_)
)

==> MemRefHandle:A:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(foo_::A)
)

==> MemRefHandle:B:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(foo_::B)
)

==> MemRefHandle:&D:0:.predef_I4
	mre: 

AddressOf(
    mMemRefType: USE
    mMRE: 
    NamedRef(
        mMemRefType: USE
        mSymHandle: SymHandle(foo_::D)
    )
)

========================================================

stmt : return

==> AssignPairs : 




==> Expression Tree(s) : 

