========================================================

stmt :  LOC 0 0 source files:	1	"/home/malusare/AssignPair/UseOA-Open64/TestCases/AssignPair/do_loop.f"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : t__1:0:.predef_I4 = N:0:.predef_I4

==> AssignPairs : 

1. mref = t__1:0:.predef_I4, 	expr = N:0:.predef_I4



==> Expression Tree(s) : 

1. ExprHandle: N:0:.predef_I4

Graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( N:0:.predef_I4 )


==> MemRefHandle:t__1:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: DEF
    mSymHandle: SymHandle(foo_::t__1)
)

==> MemRefHandle:N:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(foo_::N)
)

========================================================

stmt : do_loop (I:0:.predef_I4<=t__1:0:.predef_I4)

==> AssignPairs : 




==> Expression Tree(s) : 

1. ExprHandle: I:0:.predef_I4<=t__1:0:.predef_I4

Graph EXPRESSION TREE:

    Node 0: ET OpNode ( <= )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( I:0:.predef_I4 )
    Edge: 
        0 => 
        Node 2: ET MemRefNode ( t__1:0:.predef_I4 )


==> MemRefHandle:I:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(foo_::I)
)

==> MemRefHandle:t__1:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(foo_::t__1)
)

========================================================

stmt : I:0:.predef_I4 = 1

==> AssignPairs : 

1. mref = I:0:.predef_I4, 	expr = 1



==> Expression Tree(s) : 

1. ExprHandle: 1

Graph EXPRESSION TREE:

    Node 0: ET ConstValNode ( 1 )


==> MemRefHandle:I:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: DEF
    mSymHandle: SymHandle(foo_::I)
)

========================================================

stmt : I:0:.predef_I4 = I:0:.predef_I4+1

==> AssignPairs : 

1. mref = I:0:.predef_I4, 	expr = I:0:.predef_I4+1



==> Expression Tree(s) : 

1. ExprHandle: I:0:.predef_I4+1

Graph EXPRESSION TREE:

    Node 0: ET OpNode ( + )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( I:0:.predef_I4 )
    Edge: 
        0 => 
        Node 2: ET ConstValNode ( 1 )


==> MemRefHandle:I:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: DEF
    mSymHandle: SymHandle(foo_::I)
)

==> MemRefHandle:I:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(foo_::I)
)

========================================================

stmt : J:0:.predef_I4 = J:0:.predef_I4+1

==> AssignPairs : 

1. mref = J:0:.predef_I4, 	expr = J:0:.predef_I4+1



==> Expression Tree(s) : 

1. ExprHandle: J:0:.predef_I4+1

Graph EXPRESSION TREE:

    Node 0: ET OpNode ( + )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( J:0:.predef_I4 )
    Edge: 
        0 => 
        Node 2: ET ConstValNode ( 1 )


==> MemRefHandle:J:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: DEF
    mSymHandle: SymHandle(foo_::J)
)

==> MemRefHandle:J:0:.predef_I4
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(foo_::J)
)

========================================================

stmt : return

==> AssignPairs : 




==> Expression Tree(s) : 

