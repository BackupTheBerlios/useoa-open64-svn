========================================================

stmt :  LOC 0 0 source files:	1	"/home/malusare/AssignPair/UseOA-Open64/TestCases/AssignPair/intrinsic.f"
PRAGMA 0 190 <2,1,X> 0 (0x0) # OPENAD_INDEPENDENT


==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : PRAGMA 0 189 <2,2,Y> 0 (0x0) # OPENAD_DEPENDENT


==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : PRAGMA 0 188 <1,21,"Template_ad_template.f"> 0 (0x0) # OPENAD_XXX


==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


==> AssignPairs : 




==> Expression Tree(s) : 

========================================================

stmt : T:0:.predef_F8 = 0:X:0:anon_ptr.(1)*0:X:0:anon_ptr.(2)

==> AssignPairs : 

1. mref = T:0:.predef_F8, 	expr = 0:X:0:anon_ptr.(1)*0:X:0:anon_ptr.(2)



==> Expression Tree(s) : 

1. ExprHandle: 0:X:0:anon_ptr.(1)*0:X:0:anon_ptr.(2)

graph EXPRESSION TREE:

    Node 0: ET OpNode ( * )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( 0:X:0:anon_ptr.(1) )
    Edge: 
        0 => 
        Node 2: ET MemRefNode ( 0:X:0:anon_ptr.(2) )


==> MemRefHandle:T:0:.predef_F8
	mre: 

NamedRef(
    mMemRefType: DEF
    mSymHandle: SymHandle(head_::T)
)

==> MemRefHandle:0:X:0:anon_ptr.(1)
	mre: 

SubSetRef(
    mMemRefType: USE
    mMRE: 
    Deref(
        mMemRefType: USE
        mMRE: 
        NamedRef(
            mMemRefType: USE
            mSymHandle: SymHandle(head_::X)
        )
        mNumDeref: 1
    )
)

==> MemRefHandle:0:X:0:anon_ptr.(2)
	mre: 

SubSetRef(
    mMemRefType: USE
    mMRE: 
    Deref(
        mMemRefType: USE
        mMRE: 
        NamedRef(
            mMemRefType: USE
            mSymHandle: SymHandle(head_::X)
        )
        mNumDeref: 1
    )
)

========================================================

stmt : Y:0:anon_ptr.(1) = SIN(&T:0:.predef_F8)

==> AssignPairs : 

1. mref = Y:0:anon_ptr.(1), 	expr = SIN(&T:0:.predef_F8)



==> Expression Tree(s) : 

1. ExprHandle: SIN(&T:0:.predef_F8)

graph EXPRESSION TREE:

    Node 0: ET OpNode ( SIN(&T:0:.predef_F8) )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( &T:0:.predef_F8 )


==> MemRefHandle:Y:0:anon_ptr.(1)
	mre: 

SubSetRef(
    mMemRefType: DEF
    mMRE: 
    Deref(
        mMemRefType: USE
        mMRE: 
        NamedRef(
            mMemRefType: USE
            mSymHandle: SymHandle(head_::Y)
        )
        mNumDeref: 1
    )
)

==> MemRefHandle:&T:0:.predef_F8
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(head_::T)
)

========================================================

stmt : Y:0:anon_ptr.(2) = COS(&T:0:.predef_F8)

==> AssignPairs : 

1. mref = Y:0:anon_ptr.(2), 	expr = COS(&T:0:.predef_F8)



==> Expression Tree(s) : 

1. ExprHandle: COS(&T:0:.predef_F8)

graph EXPRESSION TREE:

    Node 0: ET OpNode ( COS(&T:0:.predef_F8) )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( &T:0:.predef_F8 )


==> MemRefHandle:Y:0:anon_ptr.(2)
	mre: 

SubSetRef(
    mMemRefType: DEF
    mMRE: 
    Deref(
        mMemRefType: USE
        mMRE: 
        NamedRef(
            mMemRefType: USE
            mSymHandle: SymHandle(head_::Y)
        )
        mNumDeref: 1
    )
)

==> MemRefHandle:&T:0:.predef_F8
	mre: 

NamedRef(
    mMemRefType: USE
    mSymHandle: SymHandle(head_::T)
)

========================================================

stmt : return

==> AssignPairs : 




==> Expression Tree(s) : 

