
========================stmt============================

stmt =  LOC 0 0 source files:	1	"/m_home/m_utkej/Argonne/svn/UseOA-Open64/trunk/TestCases/ExprTree/SimpleUnbalanced.f"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


========================stmt============================

stmt = foo_(&A:0:.predef_F8, &F:0:.predef_F8, &X:0:.predef_F8, &T:0:.predef_F8)

	--expr----------------------------------------
	  expr = &A:0:.predef_F8
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &A:0:.predef_F8 )

	--expr----------------------------------------
	  expr = &F:0:.predef_F8
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &F:0:.predef_F8 )

	--expr----------------------------------------
	  expr = &X:0:.predef_F8
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &X:0:.predef_F8 )

	--expr----------------------------------------
	  expr = &T:0:.predef_F8
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &T:0:.predef_F8 )

========================stmt============================

stmt = _END()

========================stmt============================

stmt = return

========================stmt============================

stmt = return

========================stmt============================

stmt = PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


========================stmt============================

stmt = A:0:.predef_F8 = X:0:.predef_F8*(T:0:.predef_F8+(A:0:.predef_F8-F:0:.predef_F8))

	--expr----------------------------------------
	  expr = X:0:.predef_F8*(T:0:.predef_F8+(A:0:.predef_F8-F:0:.predef_F8))
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET OpNode ( * )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( X:0:.predef_F8 )
    Edge: 
        0 => 
        Node 2: ET OpNode ( () )
        Edge: 
            2 => 
            Node 3: ET OpNode ( + )
            Edge: 
                3 => 
                Node 4: ET MemRefNode ( T:0:.predef_F8 )
            Edge: 
                3 => 
                Node 5: ET OpNode ( () )
                Edge: 
                    5 => 
                    Node 6: ET OpNode ( - )
                    Edge: 
                        6 => 
                        Node 7: ET MemRefNode ( A:0:.predef_F8 )
                    Edge: 
                        6 => 
                        Node 8: ET MemRefNode ( F:0:.predef_F8 )

========================stmt============================

stmt = return
