============================================
StmtHandle:  LOC 0 0 source files:	1	"/home/malusare/MemRefExpr/UseOA-Open64/TestCases/ExprTree/SinExpr.f"
PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


============================================
StmtHandle: foo_(&A:0:.predef_F8, &F:0:.predef_F8, &X:0:.predef_F8, &T:0:.predef_F8)

==> ExprHandle: &A:0:.predef_F8

Graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &A:0:.predef_F8 )


==> ExprHandle: &F:0:.predef_F8

Graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &F:0:.predef_F8 )


==> ExprHandle: &X:0:.predef_F8

Graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &X:0:.predef_F8 )


==> ExprHandle: &T:0:.predef_F8

Graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( &T:0:.predef_F8 )


============================================
StmtHandle: _END()

============================================
StmtHandle: return

============================================
StmtHandle: return

============================================
StmtHandle: PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END


============================================
StmtHandle: A:0:.predef_F8 = SIN(&A:0:.predef_F8+B:0:.predef_F8)

==> ExprHandle: SIN(&A:0:.predef_F8+B:0:.predef_F8)

Graph EXPRESSION TREE:

    Node 0: ET OpNode ( SIN(&A:0:.predef_F8+B:0:.predef_F8) )
    Edge: 
        0 => 
        Node 1: ET OpNode ( + )
        Edge: 
            1 => 
            Node 2: ET MemRefNode ( A:0:.predef_F8 )
        Edge: 
            1 => 
            Node 3: ET MemRefNode ( B:0:.predef_F8 )


============================================
StmtHandle: return

