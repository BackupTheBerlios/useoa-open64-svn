CallContext::setMaxDegree(1

ManagerICFGCSActive: sym = main_::N, size = <4>, bytes = 4
ManagerICFGCSActive: sym = main_::L, size = <4>, bytes = 8
ManagerICFGCSActive: sym = main_::X, size = <4>, bytes = 12
ManagerICFGCSActive: sym = sub1_::F, size = <4>, bytes = 12, refParam
====================== InterActiveFortran


 ----- first, dump of ActiveStandard per Proc ----

main_::main_
ActiveTagSet = 
{not-universal, , tag(1), tag(3), tag(4)}
ActiveSymSet = 
main_::N
main_::L
main_::X
mUnknownLocActive = 0

ActiveStmtList = 

ActiveMemRefList = 

CSActiveTagSets =============== 

<mMaxDegree: 1, CallContext: 
	CallHandle(0)
>
activeTagSet ==
{not-universal, , tag(1), tag(3), tag(4)}



CSActiveSymSets =============== 

<mMaxDegree: 1, CallContext: 
	CallHandle(0)
>
activeSymSet ==
	main_::N
	main_::L
	main_::X



===== mUnknownLocActive = 0


CSActiveStmtLists =============== 



CSActiveMemRefLists =============== 



main_::sub1_
ActiveTagSet = 
{not-universal, , tag(1), tag(6)}
ActiveSymSet = 
main_::N
sub1_::F
mUnknownLocActive = 0

ActiveStmtList = 

ActiveMemRefList = 

CSActiveTagSets =============== 

<mMaxDegree: 1, CallContext: 
	sub1_(&L:0:.predef_I4+1)
>
activeTagSet ==
{not-universal, , tag(1), tag(6)}



CSActiveSymSets =============== 

<mMaxDegree: 1, CallContext: 
	sub1_(&L:0:.predef_I4+1)
>
activeSymSet ==
	main_::N
	sub1_::F



===== mUnknownLocActive = 0


CSActiveStmtLists =============== 



CSActiveMemRefLists =============== 





 ----- then, regular InterActiveFortran dump -----

	ActiveSymList
		main_::N, active = 1
		main_::L, active = 1
		main_::X, active = 1
		sub1_::F, active = 1
	getActiveSizeInBytes() = 12

InterActiveFortran(
    Procedure( main_::main_ ): 
    ActiveStmtSet([  ] 
    )
    ActiveTagSet => MemRefExprSet([ 
            Tag(
                mTagID: 1
            )    
            Tag(
                mTagID: 3
            )    
            Tag(
                mTagID: 4
            ) ] 
    )
    Procedure( main_::sub1_ ): 
    ActiveStmtSet([  ] 
    )
    ActiveTagSet => MemRefExprSet([ 
            Tag(
                mTagID: 1
            )    
            Tag(
                mTagID: 6
            ) ] 
    )
    ActiveSymSet: [ 
        SymHandle(main_::N)
            SymHandle(main_::L)
            SymHandle(main_::X)
            SymHandle(sub1_::F) ] 
    mNumIterUseful: 2
    mNumIterVary: 2
    mNumIterActive: 2
    mSizeInBytes: 12
)
