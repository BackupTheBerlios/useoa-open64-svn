CallContext::setMaxDegree(1

====================== InterActiveFortran


 ----- first, dump of ActiveStandard per Proc ----

foo_::foo_
ActiveTagSet = 
{not-universal, , tag(12), tag(14)}
ActiveSymSet = 
foo_::A
foo_::B
head_::X
head_::Y
mUnknownLocActive = 0

ActiveStmtList = 

ActiveMemRefList = 

CSActiveTagSets =============== 

<mMaxDegree: 1, CallContext: 
	foo_(&X:0:anon_ptr.(K:0:.predef_I4), &Y:0:.predef_F8)
>
activeTagSet ==
{not-universal, , tag(12), tag(14)}

<mMaxDegree: 1, CallContext: 
	foo_(&P:0:anon_ptr.(K:0:.predef_I4), &Q:0:anon_ptr.(L:0:.predef_I4))
>
activeTagSet ==
{not-universal, , tag(14)}



CSActiveSymSets =============== 

<mMaxDegree: 1, CallContext: 
	foo_(&X:0:anon_ptr.(K:0:.predef_I4), &Y:0:.predef_F8)
>
activeSymSet ==
	foo_::A
	foo_::B
	head_::X
	head_::Y


<mMaxDegree: 1, CallContext: 
	foo_(&P:0:anon_ptr.(K:0:.predef_I4), &Q:0:anon_ptr.(L:0:.predef_I4))
>
activeSymSet ==
	foo_::B
	head_::Y



===== mUnknownLocActive = 0


CSActiveStmtLists =============== 



CSActiveMemRefLists =============== 



foo_::head_
ActiveTagSet = 
{not-universal, , tag(12), tag(14)}
ActiveSymSet = 
foo_::A
foo_::B
head_::X
head_::Y
mUnknownLocActive = 0

ActiveStmtList = 

ActiveMemRefList = 

CSActiveTagSets =============== 

<mMaxDegree: 1, CallContext: 
	CallHandle(0)
>
activeTagSet ==
{not-universal, , tag(12), tag(14)}



CSActiveSymSets =============== 

<mMaxDegree: 1, CallContext: 
	CallHandle(0)
>
activeSymSet ==
	foo_::A
	foo_::B
	head_::X
	head_::Y



===== mUnknownLocActive = 0


CSActiveStmtLists =============== 



CSActiveMemRefLists =============== 





 ----- then, regular InterActiveFortran dump -----

	ActiveSymList
		foo_::A, active = 1
		foo_::B, active = 1
		head_::X, active = 1
		head_::Y, active = 1
	getActiveSizeInBytes() = 0

InterActiveFortran(
    Procedure( foo_::foo_ ): 
    ActiveStmtSet([  ] 
    )
    ActiveTagSet => MemRefExprSet([ 
            Tag(
                mTagID: 12
            )    
            Tag(
                mTagID: 14
            ) ] 
    )
    Procedure( foo_::head_ ): 
    ActiveStmtSet([  ] 
    )
    ActiveTagSet => MemRefExprSet([ 
            Tag(
                mTagID: 12
            )    
            Tag(
                mTagID: 14
            ) ] 
    )
    ActiveSymSet: [ 
        SymHandle(foo_::A)
            SymHandle(foo_::B)
            SymHandle(head_::X)
            SymHandle(head_::Y) ] 
    mNumIterUseful: 3
    mNumIterVary: 3
)
