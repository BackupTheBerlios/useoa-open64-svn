CallContext::setMaxDegree(1

====================== InterActiveFortran


 ----- first, dump of ActiveStandard per Proc ----

foo_::foo_
ActiveTagSet = 
{not-universal, , tag(2), tag(3), tag(4)}
ActiveSymSet = 
foo_::A
foo_::X
foo_::Y
bar_::F
bar_::B
bar_::G
mUnknownLocActive = 0

ActiveStmtList = 

ActiveMemRefList = 

CSActiveTagSets =============== 

<mMaxDegree: 1, CallContext: 
	CallHandle(0)
>
activeTagSet ==
{not-universal, , tag(2), tag(3), tag(4)}



CSActiveSymSets =============== 

<mMaxDegree: 1, CallContext: 
	CallHandle(0)
>
activeSymSet ==
	foo_::A
	foo_::X
	foo_::Y
	bar_::F
	bar_::B
	bar_::G



===== mUnknownLocActive = 0


CSActiveStmtLists =============== 



CSActiveMemRefLists =============== 



foo_::bar_
ActiveTagSet = 
{not-universal, , tag(2), tag(3), tag(4)}
ActiveSymSet = 
foo_::A
foo_::X
foo_::Y
bar_::F
bar_::B
bar_::G
mUnknownLocActive = 0

ActiveStmtList = 

ActiveMemRefList = 

CSActiveTagSets =============== 

<mMaxDegree: 1, CallContext: 
	bar_(&X:0:.predef_F8, &A:0:.predef_F8, &Y:0:.predef_F8)
>
activeTagSet ==
{not-universal, , tag(2), tag(3)}

<mMaxDegree: 1, CallContext: 
	bar_(&X:0:.predef_F8, &A:0:.predef_F8, &Y:0:.predef_F8)
>
activeTagSet ==
{not-universal, , tag(2), tag(4)}



CSActiveSymSets =============== 

<mMaxDegree: 1, CallContext: 
	bar_(&X:0:.predef_F8, &A:0:.predef_F8, &Y:0:.predef_F8)
>
activeSymSet ==
	foo_::A
	foo_::X
	bar_::F
	bar_::B


<mMaxDegree: 1, CallContext: 
	bar_(&X:0:.predef_F8, &A:0:.predef_F8, &Y:0:.predef_F8)
>
activeSymSet ==
	foo_::A
	foo_::Y
	bar_::B
	bar_::G



===== mUnknownLocActive = 0


CSActiveStmtLists =============== 



CSActiveMemRefLists =============== 





 ----- then, regular InterActiveFortran dump -----

	ActiveSymList
		foo_::A, active = 1
		foo_::X, active = 1
		foo_::Y, active = 1
		bar_::F, active = 1
		bar_::B, active = 1
		bar_::G, active = 1
	getActiveSizeInBytes() = 0

InterActiveFortran(
    Procedure( foo_::foo_ ): 
    ActiveStmtSet([  ] 
    )
    ActiveTagSet => MemRefExprSet([ 
            Tag(
                mTagID: 2
            )    
            Tag(
                mTagID: 3
            )    
            Tag(
                mTagID: 4
            ) ] 
    )
    Procedure( foo_::bar_ ): 
    ActiveStmtSet([  ] 
    )
    ActiveTagSet => MemRefExprSet([ 
            Tag(
                mTagID: 2
            )    
            Tag(
                mTagID: 3
            )    
            Tag(
                mTagID: 4
            ) ] 
    )
    ActiveSymSet: [ 
        SymHandle(foo_::A)
            SymHandle(foo_::X)
            SymHandle(foo_::Y)
            SymHandle(bar_::F)
            SymHandle(bar_::B)
            SymHandle(bar_::G) ] 
    mNumIterUseful: 3
    mNumIterVary: 3
)
